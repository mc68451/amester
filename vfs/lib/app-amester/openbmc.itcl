#
# (C) Copyright IBM Corporation 2011, 2016
#

#--------------------------------------------------------------------
#
# 0penBMC host procedures
#
# Note: We connect using http and assume that user USERID can
# connect with admin privelege.
#
#--------------------------------------------------------------------


if {$::options(gui)} {
    .mbar.file.menu.connect add command -label "Open BMC (OP930 & below)" -command "openbmcconnect \#auto"
}

package require http
package require json
package require tls


class openbmcconnect {
    public variable name "myopenbmc"
    public variable ipmi_user ""
    public variable ipmi_passwd ""
    public variable addr ""
    public variable close 1
    public variable window ""
    public variable timeout 30000
    public method make_gui {}
    public method connect {}

    constructor args {
	    if {$::options(gui)} {make_gui}
    }

    destructor {
    	#delete GUI
    	if {$window ne ""} {
    	    destroy $window
    	}
    }

}

body openbmcconnect::make_gui {} {
    if {[winfo exists $window]} {
    	focus $window
    	raise $window
    	wm deiconify $window
    	return
    }

    regsub -all "::" .openbmcconnect_$this "" window

    toplevel $window
    wm title $window "Connect to Open BMC system"

    label $window.name_l -text "System name" -anchor w
    entry $window.name -textvariable [scope name]
    grid $window.name_l $window.name -sticky news -row 0

    label $window.addr_l -text "IP address" -anchor w
    entry $window.addr -textvariable [scope addr]
    grid $window.addr_l $window.addr -sticky news -row 1
    bind $window.addr <Return> [code $this connect]

    label $window.user_l -text "BMC user" -anchor w
    entry $window.user -textvariable [scope ipmi_user]
    grid $window.user_l $window.user -sticky news -row 2

    label $window.pass_l -text "BMC password" -anchor w
    entry $window.pass -textvariable [scope ipmi_passwd]
    grid $window.pass_l $window.pass -sticky news -row 3

    checkbutton $window.close -text "Close this window after connecting" -variable [scope close]
    grid $window.close -row 6 -sticky w

    button $window.connect -text "Connect" -command [code $this connect] -background lightblue
    grid $window.connect -row 8 -sticky news
}

body openbmcconnect::connect {} {
    set obj ""
    set result ""
    catch {$window.connect configure -state disabled}
    if {[catch {set obj [openbmc ::$name -addr $addr -ipmi_user $ipmi_user -ipmi_passwd $ipmi_passwd  -timeout $timeout]} result]} {
	    puts "There was an error connecting: result = $result"
	    bgerror $result
    } else {
    	if {![$obj isa openbmc]} {
    	    puts "There was an error connecting: obj= $obj"
    	} elseif {$close} {
            delete object $this
        }
    }
    catch {$window.connect configure -state normal}
}


class openbmc {
    inherit host

    #Required configuration parameters
    public variable ipmi_user ""
    public variable ipmi_passwd ""

    public variable systemURL ""
    public variable ContentEncoding ""
    public variable TokenHeader ""

    #Parameters
    protected variable vpdversion ""
    protected variable mtm ""
    protected variable model ""
    protected variable serial ""
    protected variable assetid ""

    protected variable macaddr1 ""
    protected variable macaddr2 ""
    protected variable macaddr3 ""
    protected variable macaddr4 ""

    protected variable G_CountDown -1

    http::register https 443 [list ::tls::socket -tls1 1]   ;# "-tls1 1" is required since [POODLE]

    constructor {args} {
    	eval configure $args
    	if {$addr eq ""} {
    	    return -code error "Missing a required parameter, -addr <IP address>"
    	}
        if {$ipmi_user eq ""} {
            return -code error "Missing a required parameter, -ipmi_user <username>"
        }
        if {$ipmi_passwd eq ""} {
            return -code error "Missing a required parameter, -ipmi_passwd <password>"
        }

        openbmc_open

        if {$::options(gui)} {make_gui}

        # Get basic openbmc info (Number of processors, VPD, etc.)
        if {[catch {init} initresult]} {
            return -code error "Can't initialize openbmc object: $initresult"
        }

        if {$::options(gui)} {host_window_update a b c}

    }

    destructor {
    	::amesterdebug::debug destructor "($this) destructor"
    	#FIXME: delete GUI associated with openbmc
    	#FIXME: delete all callbacks (bc holds them...)

    	openbmc_close

    	# Cancel any pending afters
    	after cancel $ipmi_health_after
    	foreach amec $ameclist {
    	    delete object $amec
    	}
    }

    # Get basic info on openbmc (initialization)
    public method init {}

    # Helper that returns the available OCC endpoints on this node
    public method find_occ_instance {}

    #
    # Scope
    #
    protected method scope_make_window {}

    #Performance metrics for workload graphs
    protected variable perfmetric_latency 0
    protected variable perfmetric_throughput 0

    #GUI
    public method make_gui {}
    public method add_node_gui_menu {host rssa_list}

    #Communication
    protected variable wait_send_sync
    protected variable wait_send_sync_databytes
    protected variable wait_send_sync_status
    public method ipmi_send_sync {rssa chan lun netfn cmd data {priority 1}}
    protected method ipmi_send_sync_callback {myuid status databytes}
    public method ipmi_send_sync_cache {rssa chan lun netfn cmd data {priority 1} {tag ""} }
    public method ipmi_send {rssa chan lun netfn cmd data callback priority}
    protected variable ipmi_msgq {}
    protected variable inprogress
    protected variable inprogress_q {}
    public variable timeout 120000
    protected method ipmi_queue {rssa chan lun netfn cmd data {callback {}} {priority 1} {to {}} {position end}}
    protected method ipmi_dequeue {}
    public method openbmc_process {token}
    public method openbmc_process_packet {packet}
    protected method ipmi_health {}
    public variable ipmi_health_period 10000 {ipmi_health}
    protected variable ipmi_health_after 0

    public variable openbmc_status "disconnected"
    public variable openbmc_sock 0
    #public variable openbmc_port 3623
    public variable openbmc_open_after 0
    public method openbmc_open {}
    public method openbmc_close {}
    public method openbmc_timeout {}
    protected method openbmc_send {tag rssa chan lun netfn cmd data}

    #AME
    #List of AME Components on host
    protected variable ameclist {}
    public method get {what args}

    # Timing
    #Track time between sending messages out over network
    protected variable data_last_ipmideqlatency [clock clicks -millisecond]

    #IPMI
    public variable ipmi_cache_enable 1
    common ipmi_cache
    #NOTE: Use of "common ipmi_cache" requires that all ipmi commands using the ipmi_send_sync_cache command
    #put AME API firmware level in the "tag" input parameter so that systems using different firmware levels can
    #connected to at the same time without a cache collision.

}

# Determine the number of OCC instances by counting the POWER processors
# listed in the IPMI FRU inventory.
#
# A hack to use ipmitool to find OCC instances, since the
# FRU data is very hard to get (many IPMI commands) on openbmc.
# Try "ipmitool -vv ... fru list" to see the long sequence of commands.
#
# Note: Habanero system numbers CPUs from 0 while Garrison
# and Firestone numbers CPUs at 1. Therefore, the CPU number
# cannot be directly used as the OCC routing byte.
#
body openbmc::find_occ_instance {} {

    # Get OCC Strings and validate at ACTIVE STATE.
    set queryURL "$systemURL/org/open_power/control/enumerate"
    set token [http::geturl $queryURL -headers $TokenHeader  ]

    set responseBody [http::data $token]
    set dict_data [json::json2dict $responseBody]
    set DictData [dict get $dict_data data]

    ::amesterdebug::debug openbmc "HTTP CMD status= [http::status $token]"
    ::amesterdebug::debug openbmc "HTTP CMD data= [http::data $token]\n"

    set SearchOccNumber 0
    set OccFound 0
    foreach LineValue $DictData {
        if {[string equal $LineValue "/org/open_power/control/occ$SearchOccNumber"]} {
            set OccFound 1
        } elseif {$OccFound == 1} {
            set OccFound 0
            if {[string first "OccActive true" $LineValue] != -1} {
                lappend _occlist [format "%02x" $SearchOccNumber]
                incr SearchOccNumber
            }
        } else {
            set OccFound 0
        }
    }


    #OpenBMC REST send CMD to OCC to return upto 4Kbytes of data.
    set queryURL "$systemURL/org/open_power/control/occ0/action/Send"
    set PssThruData "{\"data\": \[ \[65,0,5,60,0,253,15,250] ] }"
    set token [http::geturl $queryURL -headers $TokenHeader -query $PssThruData]

    #Check if CMD was ok.
    set postStat [http::status $token]
    set ReturnData [http::data $token]

    set dict_data [json::json2dict $ReturnData]
    set DictData [dict get $dict_data data]

    set l_status [expr [lrange $DictData 3 3]]
    if {$l_status == "0" && $postStat == "ok"} {
        set l_status2 [expr [lrange $DictData 4 4]]
        if {$l_status2 == "0"} {
            set G_CountDown 11
        } else {
            set G_CountDown 75
        }
    }


    return $_occlist
}

body openbmc::init {} {
    ipmi_health


    #The _possible_nodes list is hexidecimal rsaddr values in string format for all nodes
    #Presently, openbmc supports a single node.
    set _possible_nodes [list 20]
    set fwlist {}
    foreach nodeValue $_possible_nodes {
    	if {[catch {set occlist [find_occ_instance]} result]} {
    	    ::amesterdebug::debug openbmc "($this) Failed to get occlist for node.  Skipping node $nodeValue. result=$result"
    	} else {
    	    if {$occlist eq {}} {
        		#Some older AMI firmware levels fail to show the OCC properly in the fru inventory.
        		#There must have been at least 1 OCC for us to get to this point.
        		set occlist {01}
        		#return -code error "FAIL: No OCC endpoint found for $addr"
        	}
    	    #Node exists
    	    lappend fwlist $nodeValue
    	    #Add menu for each node so that we have a place to place each OCC
    	    if {$::options(gui)} {
    		    add_node_gui_menu $name [expr $nodeValue - 20]
    	    }
    	    set ameclist [concat $ameclist [ame::init_ameocc_objects $name $nodeValue $occlist]]
            ::amesterdebug::debug openbmc "List of available OCCs:$occlist"
    	}
    }
    ::amesterdebug::debug openbmc "List of available nodes:$fwlist"
}



body openbmc::get {what args} {
    switch $what {
	ameclist {return $ameclist}
	amec {return [lindex $ameclist 0]}
	openbmc_status {return $openbmc_status}
	default {return -code error "unknown command for amec: $what $args"}
    }
}

body openbmc::make_gui {} {
    ::amesterdebug::debug gui "openbmc_make_host_window $name"

    # Add all sensor labels
    # These are the stats that are created as labels
    set host_label_list [list {name} {addr} {ameutilport} {link} {vpdversion} {mtm} {model} {serial} {assetid} {macaddr1} {macaddr2} {macaddr3} {macaddr4}]

    foreach {key}  $host_label_list  {
    	if {![info exists ::host_stats_anchor($key)]} {
    	    set anchor e
    	} else {
    	    set anchor $::host_stats_anchor($key)
    	}
    	host_window_add $name $key [label .host.c.f.${name}_${key} -textvariable [scope $key] -anchor $anchor -font $::fixedfont] $key
    }
}


#
# openbmc Communication
#


# ipmi_send_sync
#
# This is a command to send an ipmi cmd to a openbmc.
# This command waits for a response, prints it, then returns.
body openbmc::ipmi_send_sync {rssa chan lun netfn cmd data {priority 1}} {
    set myuid [uid_create]

    if {[::amesterdebug::set openbmc]} {
        binary scan $data "H*" all
        ::amesterdebug::debug openbmc "($this) ipmi_send_sync: cmd=$cmd data=$all "
    }

    set callback "$this ipmi_send_sync_callback $myuid \$status \$databytes"
    ipmi_queue $rssa $chan $lun $netfn $cmd $data $callback $priority
    # The "exists" check below is required since openbmc can fake some responses and
    # set the vwait variable sooner than we can check it!

    if {![info exists ::wait_send_sync($myuid)]} {
	::vwait ::wait_send_sync($myuid)
    }

    array unset wait_send_sync $myuid
    set status $wait_send_sync_status($myuid)
    set databytes $wait_send_sync_databytes($myuid)

    array unset wait_send_sync_status $myuid
    array unset wait_send_sync_databytes $myuid

    return [list $status $databytes]
}


body openbmc::ipmi_send_sync_callback {myuid status databytes} {
    set wait_send_sync_status($myuid) $status
    set wait_send_sync_databytes($myuid) $databytes
    set ::wait_send_sync($myuid) 1
    #::amesterdebug::debug ipmi ">>($this) ipmi_send_sync_callback"
}

body openbmc::ipmi_send_sync_cache {rssa chan lun netfn cmd data {priority 1} {tag ""} } {
    if {[::amesterdebug::set openbmc]} {
        binary scan $data "H*" all
        ::amesterdebug::debug ipmi "($this) ipmi_send_sync_cache: cmd=$cmd data=$all "
    }
    #Ignore channel and lun in cache. Assume all firmware instances on system use same AME API and AME version
    #set index [binary format "a*a*H2H2H2a*" $mtm $tag $rssa $netfn $cmd $data]
    #NOTE: System z SE does not have MTM info to send back.
    set index [binary format "a*H2H2H2a*" $tag $rssa $netfn $cmd $data]

    if {$ipmi_cache_enable && ![info exists ipmi_cache($index)]} {
	set ipmi_cache($index) [ipmi_send_sync $rssa $chan $lun $netfn $cmd $data $priority ]
    } else {
    	#Print any debugging for results returned from cache
    	if {[::amesterdebug::set openbmc]} {
    	    binary scan $data "H*" all
    	    ::amesterdebug::debug ipmi "IPMI cache query ($this): rssa=$rssa chan=$chan lun=$lun netfn=$netfn cmd=$cmd data_len=[string length $data] data=$all"
    	    set status [lindex $ipmi_cache($index) 0]
    	    set databytes [lindex $ipmi_cache($index) 1]
    	    binary scan $databytes "H*" all
    	    ::amesterdebug::debug ipmi "IPMI cache response ($this): status=$status data=$all"
    	}
    }
    return $ipmi_cache($index)
}


body openbmc::ipmi_send {rssa chan lun netfn cmd data callback priority} {
    ipmi_queue $rssa $chan $lun $netfn $cmd $data $callback $priority
}

# based on bc::net_send_msg
#
#
body openbmc::ipmi_queue {rssa chan lun netfn cmd data {callback {}} {priority 1} {to {}} {position end}} {
    #Do we still need tags?
    set tag 0

    if {$to eq {}} {set to $timeout}

    set item [list $priority $tag $callback $to $rssa $chan $lun $netfn $cmd $data]
    set ipmi_msgq [linsert $ipmi_msgq $position $item]


    # sort message queue by priority
    # note: messages of the same priority remain in the same order.
    #   Therefore, inserting into the front or end of the msgq will add the
    #   message at the beginning or end of messages with the same priority.
    #
    set ipmi_msgq [lsort -integer -index 0 $ipmi_msgq]

    # Process right away, if no messages are waiting
    if {[llength $ipmi_msgq] == 1} {
	ipmi_dequeue
    }
}

# ipmi_dequeue
# This function checks if 1) we are ready to send out a message to the host
# and 2) there is a message waiting to be sent. If so, send it.
# If not, just return.
body openbmc::ipmi_dequeue {} {
    ::amesterdebug::debug openbmc "($this) ipmi_dequeue"
    # Do not start new requests if network traffic is paused
    if {!$::network} {return}
    # Do nothing if we are waiting on a response from host.
    if {[llength $inprogress_q]} {return}
    # Do nothing if outgoing message queue is empty
    if {![llength $ipmi_msgq]} {
	return
    }
    # Do nothing if network is not connected. Health monitor with reconnect.
    if {$openbmc_status ne "connected"} {
	    ::amesterdebug::debug openbmc "ipmi_dequeue: not connected ($openbmc_status)"
	    return
    }

    set item [lindex $ipmi_msgq 0]
    set priority [lindex $item 0]
    set tag [lindex $item 1]
    set callback [lindex $item 2]
    set to [lindex $item 3]
    set rssa [lindex $item 4]
    set chan [lindex $item 5]
    set lun [lindex $item 6]
    set netfn [lindex $item 7]
    set cmd [lindex $item 8]
    set data [lindex $item 9]

    if {[info exists inprogress($tag,tag)]} {
    	::amesterdebug::debug openbmc "Message for $tag pending with same tag. ${netfn}${cmd}${data}"
    	return
    }

    #::amesterdebug::debug openbmc "dequeue: tag=$tag msg=${netfn}${cmd}${data}"
    set inprogress($tag,tag) $tag
    set inprogress($tag,priority) $priority
    set inprogress($tag,callback) $callback
    set inprogress($tag,timeout) $to
    set inprogress($tag,rssa) $rssa
    set inprogress($tag,chan) $chan
    set inprogress($tag,lun) $lun
    set inprogress($tag,netfn) $netfn
    set inprogress($tag,cmd) $cmd
    set inprogress($tag,data) $data
    lappend inprogress_q $tag

    set ipmi_msgq [lreplace $ipmi_msgq 0 0]

    if {$to != 0} {
	set inprogress($tag,after) [after $to [code $this openbmc_timeout]]
	#::amesterdebug::debug after "after set $inprogress($tag,after) for $this"
    }

    openbmc_send $tag $rssa $chan $lun $netfn $cmd $data

    ${name}_ipmimsgcount add_data 1
}


body openbmc::openbmc_send {tag rssa chan lun netfn cmd data} {
    set len [string length $data]
    set l_Stop [ expr $len - "1"]
    set l_len [ expr $len + "2"]

    if {[::amesterdebug::set openbmc]} {
	    binary scan $data "H*" all
	    ::amesterdebug::debug openbmc "($this) : openbmc_send : HTTP openbmc_send netfn=$netfn cmd=$cmd data=$all"
	    ::amesterdebug::debug openbmc "($this) :                                     data length = $l_len bytes"
    }

    set cmd2dec [expr 0x$cmd]

    set tempmsg [binary format "a*" $data]
    #set data2dec 0
    if {$tempmsg ne ""} {
        binary scan $tempmsg "H*" data2
        #set data2dec [expr 0x$data2]
    }

    set a 0
    set b 1
    set l_myData ""
    for {set x 0} {$x<$len} {incr x} {
        set field1 [string range $data2 $a $b]
        append l_myData [expr 0x$field1]
        if {$x ne $l_Stop } {
            append l_myData ","
        }
        incr a 2
        incr b 2
    }

    if { $netfn == 6 && $cmd == 1 } {
        ::amesterdebug::debug openbmc "($this) Fake the IPMI response to get device ID"
	    set inprogress($tag,start_time_ms) [clock clicks -milliseconds]
        openbmc_process_packet [binary format H2a* 00 "hello amester"]
    } else {
        set occNum [format %d $lun]
        set queryURL "$systemURL/org/open_power/control/occ$occNum/action/Send"
        set PssThruData "{\"data\": \[ \[65,0,$l_len,$cmd2dec,0,$l_myData] ] }"

        ::amesterdebug::debug openbmc "($this) : geturl : URL     : $queryURL"
        ::amesterdebug::debug openbmc "($this) : geturl : COOKIE  : $TokenHeader"
        ::amesterdebug::debug openbmc "($this) : geturl : HTTP    : $PssThruData"

        # Send message on http
        if {[catch {set openbmc_sock [http::geturl $queryURL -headers $TokenHeader -query $PssThruData -command [ list $this openbmc_process]]} result]} {
            puts "($this) openbmc_send error: failed socket write:  $result"
            ::amesterdebug::debug openbmc "($this) openbmc_send error: failed socket write:  $result"
    	} else {
    	    # Success. Record number of bytes transmitted
    	    ${name}_ipmibytestx add_data $l_len
    	}

        ::amesterdebug::debug openbmc "($this) : geturl : SEND : ################################\n\n"

    	#Mark time when message is sent
    	if {$tag ne {}} {
    	    set now [clock clicks -millisecond]
    	    set inprogress($tag,start_time_ms) $now
    	    ${name}_ipmideqlatency add_data [expr $now - $data_last_ipmideqlatency]
    	    set data_last_ipmideqlatency $now
    	}
    }
}

body openbmc::openbmc_process {token} {
    ::amesterdebug::debug openbmc "($this) openbmc_process"
    set status ""
    set ipmi_databytes ""
    set result ""

    #to be removed.
    if {$G_CountDown > 0} {
        puts \x1b\[H\x1b\[2J
        puts "($this) : HTTP CMD status= [http::status $token] --->$G_CountDown"
        incr G_CountDown -1
    } elseif {$G_CountDown == 0} {
        puts \x1b\[H\x1b\[2J
        incr G_CountDown -1
    }
    ::amesterdebug::debug openbmc "($this) : CALLBACK : HTTP CMD status= [http::status $token]"
    ::amesterdebug::debug openbmc "($this) : CALLBACK : HTTP CMD data= [http::data $token]"

    upvar #0 $token state
    # Access state as a Tcl array
    set postStat [http::status $token]

    set responseBody [http::data $token]
    set dict_data [json::json2dict $responseBody]
    set DictData [dict get $dict_data data]

    #Check if CMD was ok.
    if {$postStat eq "ok"} {
        #Process the bytes read from the socket

        #Inside Data.
        #Sequence ID      bit8  $DictData 0
        #Command Number   bit8  $DictData 1
        #STATUS           bit8  $DictData 2
        set l_status [expr [lrange $DictData 2 2]]
        #Count            bit16 $DictData 3,4
        #DATA             bit8  $DictData 3-end -2
        foreach byte [lrange $DictData 5 end-2] {
    	       set ipmi_databytes "${ipmi_databytes}[format "%02x" $byte]"
        }
        set l_databytes [binary format "H*" $ipmi_databytes]
        #CHECKSUM         bit8  $DictData end-1-end

        openbmc_process_packet [binary format H2a* $l_status $l_databytes]

    } else {
        ::amesterdebug::debug openbmc "($this) : CALLBACK : openbmc_process: can't read packet. result=$postStat"
        return
    }
}

body openbmc::openbmc_process_packet {packet} {
    ::amesterdebug::debug openbmc "($this) openbmc_process_packet"

    set stop_time_ms [clock clicks -milliseconds]
    set callback ""

    # Read the inprogress data and clear it for next message

    set tag [lindex $inprogress_q 0]; #whatever it was when enqueued
    #record message latency
    if {![info exists inprogress($tag,tag)]} {

        if {[::amesterdebug::set openbmc]} {
        	::amesterdebug::debug openbmc "WARN: ($this) openbmc_process_packet received $tag, but no message was sent."
        	binary scan $packet "H*" all
        	::amesterdebug::debug openbmc "      packet received: $all"
        }
    	exit
    	return
    }
    set start_time_ms $inprogress($tag,start_time_ms)
    set callback $inprogress($tag,callback)

    after cancel $inprogress($tag,after)
    array unset inprogress "$tag,*"
    set inprogress_q [lreplace $inprogress_q 0 0]

    # Now all the inprogress data has been used. Can launch next command
    # and overlap callback processing with network latency of next command.
    ipmi_dequeue

    # Now that message has gone out, do long latency processing.
    ${name}_ipmimsglatency add_data [expr $stop_time_ms - $start_time_ms]

    set start_processing [clock clicks -milliseconds]

    set databytes {}
    set status {}

    binary scan $packet "ca*" status databytes
    set len [string length $databytes]

    #Set useful data bytes received (not status)
    ${name}_ipmibytesrx add_data $len

	binary scan $databytes "H*" all

    if {$callback ne {}} {
        ::amesterdebug::debug openbmc "($this) openbmc_process_packet callback=$callback"
        if {[catch [list eval $callback] result]} {
            ::amesterdebug::debug openbmc "($this) openbmc_process_packet error; failed executing callback $callback: $result"
	        binary scan $databytes "H*" all
    	    ::amesterdebug::debug openbmc "  status=$status databytes=$all"
        }
    }

    #Record time to process the message
    set now [clock clicks -milliseconds]
    ${name}_ipmiprocesslatency add_data [expr $now - $start_processing]

}

body openbmc::openbmc_timeout {} {
    ::amesterdebug::debug openbmc "($this) timeout"
    openbmc_close
    openbmc_open
    return
}

body openbmc::openbmc_close {} {
    ::amesterdebug::debug openbmc "openbmc_close"
    set link "down"
    set code [catch {close $openbmc_sock}]
    set openbmc_status "closed"
    if {$openbmc_sock == 0} {return}

    #Delete timers
    after cancel $openbmc_open_after
    foreach timer [array names inprogress *,after] {
	after cancel $inprogress($timer)
    }

    #Delete inprogress queue (since socket is closed, no more
    #messages can return
    set inprogress_q {}

    # remove storage for this sock and repost all callback messages
    foreach index [array names inprogress *,tag] {
	#Get message that failed
	set tag $inprogress($index)
	set priority $inprogress($tag,priority)
	set callback $inprogress($tag,callback)
	set to $inprogress($tag,timeout)
	set rssa $inprogress($tag,rssa)
	set chan $inprogress($tag,chan)
	set lun $inprogress($tag,lun)
	set netfn $inprogress($tag,netfn)
	set cmd $inprogress($tag,cmd)
	set data $inprogress($tag,data)
	#remove message from inprogress array
	array unset inprogress "$tag,*"
	#Sending message will also reopen the connection
	ipmi_queue $rssa $chan $lun $netfn $cmd $data $callback $priority $to 0
    }

    set openbmc_sock 0

}


body openbmc::openbmc_open {} {
    ::amesterdebug::debug openbmc "openbmc_open ($this)"
    set result {}

    # Done if a socket already exists or is opening
    if {$openbmc_sock != 0 || $openbmc_status eq "opening"} {
        ::amesterdebug::debug openbmc "($this) : openbmc_open : Already open"
        return
    };

    set systemURL "https://$addr"
    dict set ContentEncoding "Content-Type" "application/json"
    set loginDATA "{\"data\": \[ \"$ipmi_user\", \"$ipmi_passwd\" ] }"
    set queryURL "$systemURL/login"

    # Log onto BMC
    if {[catch {set logintoken [http::geturl $queryURL -headers $ContentEncoding -query $loginDATA ]} result]} {
    	::amesterdebug::debug openbmc "($this) openbmc_open : FAILED to connect : $result"
    	return
    }
    if {[http::status $logintoken] ne "ok"} {
        ::amesterdebug::debug openbmc "($this) openbmc_open; failed to open HTTP: $queryURL"
        return
    }

    ::amesterdebug::debug openbmc "HTTP CMD status= [http::status $logintoken]"
    ::amesterdebug::debug openbmc "HTTP CMD data= [http::data $logintoken]"

    upvar #0 $logintoken state
    array set metaData $state(meta)
    set cookielist { }
    foreach {key value} [array get metaData] {
        if {$key eq "Set-Cookie"} {
            lappend cookielist [lindex [split $value ";"]]
        }
    }
    set TokenHeader "$ContentEncoding Cookie: [join $cookielist "; "]"
    ::amesterdebug::debug openbmc "($this) HTTP Cookie : $TokenHeader"
    # Good style, free the memory for the last http request
    http::cleanup $logintoken
    set openbmc_status "connected"
    set link "up"
}


body openbmc::ipmi_health {} {
    ::amesterdebug::debug openbmc "openbmc_health $name $openbmc_status"

    after cancel $ipmi_health_after

    if {$ipmi_health_period} {
	       set ipmi_health_after [after $ipmi_health_period [code $this ipmi_health]]
    } else {
	       return
    }

    switch -- $openbmc_status {
    	"disconnected" {
                ::amesterdebug::debug openbmc "($this) Channel is disconnected, opening"
    	    openbmc_open
    	}
    	"opening" {
                ::amesterdebug::debug openbmc "($this) Channel is opening, please wait"
    	}
    	"connected" {
                ::amesterdebug::debug openbmc "($this) Channel is connected, dispatching"
    	    ipmi_dequeue
    	}
    	"timeout" {
                ::amesterdebug::debug openbmc "($this) Channel timed out, closing"
    	    openbmc_close
    	}
    	"error" {
                ::amesterdebug::debug openbmc "($this) Channel error, closing"
    	    openbmc_close
    	}
    	"closed" {
                ::amesterdebug::debug openbmc "($this) Channel closed, attempting to open"
    	    # Try to re-open host
    	    openbmc_open
    	}
    	default {
    	    ::amesterdebug::debug openbmc "Error: undefined status $openbmc_status for $name"
    	}
    }

}

body openbmc::add_node_gui_menu {host node} {
    set name ""
    regsub -all "::" $host "" name
    .host.c.f.${name}_menu.functions.m add cascade -label "${name}_node${node}" -menu .host.c.f.${name}_menu.functions.m._node${node}
    menu .host.c.f.${name}_menu.functions.m._node${node}
}
