#
# (C) Copyright IBM Corporation 2011, 2016
#

class ame {
    public proc init_ame_objects {hostobj {rssa_list {20}}}
    public proc init_ameocc_objects {hostobj {rssa {20}} {occ_list {0}}}

    #The blade or rack-mount server on which AME resides
    public variable host ""

    #DEV NOTE: Going forward, the rssa and lun should be abstracted to a template and
    #magic bytes that the specific host type needs to forward the AME message.
    #This allows IPMI or IBM POWER to co-exist with a common ame component since the
    #AME messages are common, but the routing is different.

    #Address of AME component for routing inside host system
    #0x20 is typically used for BMC in IPMI protocol.
    #The host object that creates the AME component is responsible for
    #setting this variable.  Used only in ame_2_24 onward.
    #Note values are hexadecimal, not decimal
    #By default we assume 1 AME component on the BMC.
    public variable rssa 20

    #LUN (Logical Unit) for IPMI commands.
    #For P8, LUN is overloaded in Amester to correspond to the OCC
    #number for passing through Amester data packet.
    #A combination of rssa and the OCC number map to one AME component.
    #Used only in ame_2_26 onward.
    public variable lun 00

    # Communication interface
    # This is a pass-thru to host-level versions of the same methods.
    # Some Parameters are filled with values apporpriate for this AME object
    public method cmd {netfn cmd args}
    public method send_sync {netfn cmd data {priority 1}}
    public method send_sync_cache {netfn cmd data {priority 1} {tag ""}}
    public method send {netfn cmd data callback {priority 1}}

    # Hooks for Amester extensions
    public common constructor_hook {}
    public proc add_constructor_hook {callback} {
	if {$callback ne ""} {
	    lappend constructor_hook [list $callback]
	}
    }
}

#
# Find all AME Components in the host, initialize them, and return a list of them.
#
# rssa_list: is a list of IPMI responder addresses that indicate the
# interface location for each AME component in the system. Someday
# this could evolve to a channel object that wraps the IPMI interface
# so more interfaces can be used.
proc ame::init_ame_objects {host {rssa_list {20}}} {
    ::amesterdebug::debug ame ">>ame::init_ame_objects"
    set min_ame_api_major 2
    set min_ame_api_minor 8

    # Update this when supported API level changes (for systems up to P7+)
    set max_ame_api_major 2
    set max_ame_api_minor 28

    set ameclist ""
    set ameapimajor 0
    set ameapiminor 0

    # Get Chassis status to make sure we can communicate.
    if {[catch {set result [$host ipmi_send_sync 20 00 00 06 01 {}]} errmsg]} {
	# API command didn't work
	puts "Error while determining AME firmware level: $errmsg"
	puts "Can't send IPMI command to $host. No IPMI support?"
	return
    } else {
	set status [lindex $result 0]
	if {$status!=0} {
	    puts "error: status of IPMI 06 01 = $status"
	    return
	} else {
	    ::amesterdebug::debug ame "status of IPMI 06 01 was zero"
	}
    }

    set i 0
    ::amesterdebug::debug ame "ame::init_ame_objects rssa_list=$rssa_list"

    # Loop through the list of Nodes ($rssa_list)
    foreach addr $rssa_list {
	::amesterdebug::debug ame "ame::init_ame_objects trying addr=$addr"
	set amefw {}
	set ameapimajor 0
	set ameapiminor 0

	# Get AME API version from host at specific address
    ################################################################################
    # SEND CMD : 0x0A   10   – Get AMESTER API VEersion.
    ################################################################################
	if {[catch {set result [$host ipmi_send_sync $addr 00 00 3a 3c [binary format "c" 10]]} errmsg]} {
	    # API command didn't work
	    puts "Error while determining AME firmware level on host=$host addr=$addr: $errmsg"
	} else {
	    set status [lindex $result 0]
	    if {$status != 0} {
		puts "api status = $status"
	    } else {
		set databytes [lindex $result 1]
		binary scan $databytes "H*" all
		#puts "api bytes = $all"
		binary scan $databytes "cc" ameapimajor ameapiminor
	    }
	}

	if {$ameapimajor == 0} {
	    puts "Could not detect AME firmware on host=$host addr=$addr"
	    return
	}


	if {[catch {

	    # NOTE: default case takes care of exact match, too high,
	    # and too low. Numbered cases take care of inbetween
	    # missing API levels.

	    switch "${ameapimajor}.${ameapiminor}" {

		2.9 {
		    puts "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Will try to use previous version 2.8 for $host"
		    ::amesterdebug::debug 1 "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Will try to use previous version 2.8 for $host"
		    set amefw [ame_2_8 ::${host}_ame${i} $host -rssa $addr]
		}
		2.10 {
		    puts "This version of $::amesterinit::toolname does not support AME Firmware ${ameapimajor}.${ameapiminor}.  Will try to use previous version 2.8 for $host"
		    ::amesterdebug::debug 1 "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Will try to use previous version 2.8 for $host"
		    set amefw [ame_2_8 ::${host}_ame${i} $host -rssa $addr]
		}
		2.11 {
		    puts "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Will try to use previous version 2.8 for $host"
		    ::amesterdebug::debug 1 "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Will try to use previous version 2.8 for $host"
		    set amefw [ame_2_8 ::${host}_ame${i} $host -rssa $addr]
		}
		2.17 {
		    puts "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Will try to use previous version 2.16 for $host"
		    ::amesterdebug::debug 1 "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Will try to use previous version 2.16 for $host"
		    set amefw [ame_2_16 ::${host}_ame${i} $host -rssa $addr]
		}

		default {
		    if {$ameapimajor < $min_ame_api_major || ($ameapimajor==$min_ame_api_major && $ameapiminor < $min_ame_api_minor)} {
			puts "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Skipping $host"
			::amesterdebug::debug 1 "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Skipping $host"
		    } elseif {$ameapimajor > $max_ame_api_major || ($ameapimajor==$max_ame_api_major && $ameapiminor > $max_ame_api_minor)} {
			puts "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Will try to use previous version ${max_ame_api_major}.${max_ame_api_minor} for $host"
			::amesterdebug::debug 1 "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Will try to use previous version ${max_ame_api_major}.${max_ame_api_minor} for $host"
			set amefw [ame_${max_ame_api_major}_${max_ame_api_minor} ::${host}_ame${i} $host -rssa $addr]
		    } else {
			# We must exactly match a known API level
			set amefw [ame_${ameapimajor}_${ameapiminor} ::${host}_ame${i} $host -rssa $addr]
		    }
		}

	    }
	} result]} {
	    bgerror "can't connect to AME firmware with API ${ameapimajor}.${ameapiminor} for $host"
	} else {
	    lappend ameclist $amefw
	    # Hook for new AME components
	    foreach call $::ame::constructor_hook {
		catch {eval $call $amefw} result
		if {$result != ""} {
		    bgerror "$amefw: constructor_callback error: call=$call  result=$result"
		}
	    }

	}

	incr i
    }
    return $ameclist
}


#
# Find and initialize all AME Components in the host and return a list of them.
#
# occ_list is a list of 2-character hexadecimal numbers (ex: 00 01 02)
proc ame::init_ameocc_objects {host {rssa {20}} {occ_list {00}}} {
    ::amesterdebug::debug ame ">>ame::init_ameocc_objects"
    set min_ame_api_major 2
    set min_ame_api_minor 8

    # Update this when supported API level changes
    set max_ame_api_major 2
    set max_ame_api_minor 28

    set ameclist ""
    set ameapimajor 0
    set ameapiminor 0

    set i 0
    ::amesterdebug::debug ame "ame::init_ameocc_objects rssa=$rssa"

    foreach occ $occ_list {
	::amesterdebug::debug ame "ame::init_ame_objects trying addr=$rssa, occ=$occ"
	set amefw {}
	set ameapimajor 0
	set ameapiminor 0
	set node_number [expr $rssa - 20]

	##
	## Get AME API version from host at specific address
	## Note: For P8 systems, the request data with netfn of 3a and cmd of 3c/3b must specify OCC number in the first byte of data field
	##
	## NOTE: Do not cache the "0a" command below. We need to have 1 real command get to each OCC to check health.
    ################################################################################
    # SEND CMD : 0x0A   10   – Get AMESTER API VEersion.
    ################################################################################
	if {[catch {set result [$host ipmi_send_sync $rssa 00 $occ 3a 3c [binary format "H2" 0a]]} errmsg]} {
	    # API command didn't work
	    puts "Error while determining AME firmware level on host=$host addr=$rssa: $errmsg"
	    return -code error "Error while determining AME firmware level on host=$host addr=$rssa: $errmsg"
	} else {
	    set status [lindex $result 0]
	    if {$status != 0} {
		puts "api status = $status"
	    } else {
		set databytes [lindex $result 1]
		binary scan $databytes "H*" all
		#puts "api bytes = $all"
		binary scan $databytes "cc" ameapimajor ameapiminor
	    }
	}

	if {$ameapimajor == 0} {
        puts "Could not detect AME firmware on host=$host addr=$rssa occ=$occ occlist=$occ_list"
	    return
	}

	if {[catch {

	    # NOTE: default case takes care of exact match, too high,
	    # and too low. Numbered cases take care of inbetween
	    # missing API levels.

	    switch "${ameapimajor}.${ameapiminor}" {

		2.26 {
            set amefw [ame_${ameapimajor}_${ameapiminor} ::${host}_node${node_number}_ame${i} $host -rssa $rssa -lun $occ -node $node_number]
        }
		default {
		    if {$ameapimajor < $min_ame_api_major || ($ameapimajor==$min_ame_api_major && $ameapiminor < $min_ame_api_minor)} {
			puts "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Skipping $host"
			::amesterdebug::debug 1 "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Skipping $host"
            } elseif {$ameapimajor > $max_ame_api_major || ($ameapimajor==$max_ame_api_major && $ameapiminor > $max_ame_api_minor)} {
			puts "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Will try to use previous version ${max_ame_api_major}.${max_ame_api_minor} for $host"
			::amesterdebug::debug 1 "This version of $::amesterinit::toolname does not support AME Firmware API ${ameapimajor}.${ameapiminor}.  Will try to use previous version ${max_ame_api_major}.${max_ame_api_minor} for $host"
            set amefw [ame_${max_ame_api_major}_${max_ame_api_minor} ::${host}_node${node_number}_ame${i} $host -rssa $rssa -lun $occ -node $node_number]
		    } else {
			# We must exactly match a known API level
			set amefw [ame_${ameapimajor}_${ameapiminor} ::${host}_node${node_number}_ame${i} $host -rssa $rssa -lun $occ -node $node_number]
		    }
		}

	    }
	} result]} {
	    bgerror "Can't connect to AME firmware with API ${ameapimajor}.${ameapiminor} for host=${host} node=${node_number} occ=${occ}"
	    return -code error "Can't connect to AME firmware with API ${ameapimajor}.${ameapiminor} for host=${host} node=${node_number} occ=${occ}"

	} else {
	    lappend ameclist $amefw
	    # Hook for new AME components
	    foreach call $::ame::constructor_hook {
		catch {eval $call $amefw} result
		if {$result != ""} {
		    #Hook failed.  Keep calm and carry on. (no return code error)
		    bgerror "$amefw: constructor_callback error: call=$call  result=$result"
		}
	    }

	}

	incr i
    }
    return $ameclist
}


#
# Communication interface
#

body ame::cmd {netfn cmd args} {
    $host ipmicmd $rssa $netfn $lun $cmd $args
}

body ame::send_sync {netfn cmd data {priority 1}} {
    $host ipmi_send_sync $rssa 00 $lun $netfn $cmd $data $priority
}

body ame::send_sync_cache {netfn cmd data {priority 1} {tag ""}} {
    $host ipmi_send_sync_cache $rssa 00 $lun $netfn $cmd $data $priority $tag
}

body ame::send {netfn cmd data callback {priority 1}} {
    $host ipmi_send $rssa 00 $lun $netfn $cmd $data $callback $priority
}
